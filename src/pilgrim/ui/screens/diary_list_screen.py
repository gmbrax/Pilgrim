from click import prompt
from textual.app import ComposeResult
from textual.screen import Screen
from textual.widgets import Header, Footer, Label, Static, OptionList, Button
from textual.binding import Binding
from textual.containers import Vertical, Container, Horizontal


class DiaryListScreen(Screen):
    TITLE = "Pilgrim - Main"

    BINDINGS = [
        Binding("n", "new_diary", "Novo Di√°rio"),
        Binding("^q", "quit", "Sair"),
    ]

    def __init__(self):
        super().__init__()
        self.selected_diary_index = None  # Armazena o √≠ndice do di√°rio selecionado

    def compose(self) -> ComposeResult:
        yield Header()
        yield Container(
            Static("Pilgrim", classes="app-title"),
            Label("Select a diary"),
            OptionList(id="option-list", classes="diary-options"),
            Horizontal(
                Button("New diary", id="new-diary"),

                Button("Edit diary", id="edit-diary"),
                Button("üîÑ Refresh", id="refresh-btn"),
                classes="actions-buttons",
            ),
            classes="dialog-container"
        )
        yield Static(
            "Tip: use ‚Üë‚Üì to navigate ‚Ä¢ ENTER to Select ‚Ä¢ "
            "TAB to alternate the fields ‚Ä¢ SHIFT + TAB to alternate back ",
            classes="tips"
        )
        yield Footer()

    def on_mount(self) -> None:
        self.refresh_diaries()
        self.update_buttons_state()  # Atualiza estado inicial dos bot√µes

    def refresh_diaries(self):
        try:
            service_manager = self.app.service_manager
            option_list = self.query_one(".diary-options")
            option_list.clear_options()
            travel_diary_service = service_manager.get_travel_diary_service()
            diaries = travel_diary_service.read_all()

            if not diaries:
                # Para OptionList vazio, voc√™ pode adicionar uma string simples
                option_list.add_option("[dim]Nenhum di√°rio encontrado. Pressione 'N' para criar um novo![/dim]")
            else:
                for diary in diaries:
                    # Adiciona cada op√ß√£o como string com markup rich
                    option_list.add_option(f"[b]{diary.name}[/b]\n[dim]ID: {diary.id}[/dim]")

        except Exception as e:
            self.notify("Error: " + str(e))

    def on_option_list_option_selected(self, event: OptionList.OptionSelected) -> None:
        """Handle quando uma op√ß√£o √© selecionada"""
        diaries = self.app.service_manager.get_travel_diary_service().read_all()

        if diaries and event.option_index < len(diaries):
            self.selected_diary_index = event.option_index
            selected_diary = diaries[event.option_index]
            self.notify(f"Di√°rio selecionado: {selected_diary.name}")
        else:
            # Caso seja a op√ß√£o "nenhum di√°rio encontrado"
            self.selected_diary_index = None

        self.update_buttons_state()

    def update_buttons_state(self):
        """Atualiza o estado dos bot√µes baseado na sele√ß√£o"""
        edit_button = self.query_one("#edit-diary")


        # S√≥ habilita os bot√µes se h√° um di√°rio selecionado
        has_selection = self.selected_diary_index is not None
        edit_button.disabled = not has_selection


    def on_button_pressed(self, event: Button.Pressed) -> None:
        """Handle cliques nos bot√µes"""
        button_id = event.button.id

        if button_id == "new-diary":
            self.action_new_diary()
        elif button_id == "edit-diary":
            self.action_edit_diary()
        elif button_id == "refresh-btn":
            self.refresh_diaries()
            self.notify("Lista atualizada manualmente!")

    def action_new_diary(self):
        """A√ß√£o para criar novo di√°rio"""
        self.notify("Criando novo di√°rio...")
        # Aqui voc√™ pode navegar para uma tela de cria√ß√£o de di√°rio

    def action_edit_diary(self):
        """A√ß√£o para editar di√°rio selecionado"""
        if self.selected_diary_index is not None:
            diaries = self.app.service_manager.get_travel_diary_service().read_all()
            if self.selected_diary_index < len(diaries):
                selected_diary = diaries[self.selected_diary_index]
                self.notify(f"Editando di√°rio: {selected_diary.name}")
                # Aqui voc√™ pode navegar para uma tela de edi√ß√£o
                # self.app.push_screen(EditDiaryScreen(diary=selected_diary))

    def refresh_diaries(self):
        """Atualiza a lista de di√°rios no OptionList"""
        try:
            service_manager = self.app.service_manager
            option_list = self.query_one("#option-list")  # Usando ID em vez de classe

            # Debug
            current_count = len(option_list.options) if hasattr(option_list, 'options') else 0
            self.notify(f"OptionList atual tem {current_count} op√ß√µes")

            option_list.clear_options()

            travel_diary_service = service_manager.get_travel_diary_service()
            diaries = travel_diary_service.read_all()

            self.notify(f"Carregando {len(diaries)} di√°rios do servi√ßo")

            if not diaries:
                option_list.add_option("[dim]Nenhum di√°rio encontrado. Pressione 'N' para criar um novo![/dim]")
                self.selected_diary_index = None
            else:
                for diary in diaries:
                    option_list.add_option(f"[b]{diary.name}[/b]\n[dim]ID: {diary.id}[/dim]")

                # Valida se a sele√ß√£o ainda √© v√°lida
                if (self.selected_diary_index is not None and
                        self.selected_diary_index >= len(diaries)):
                    self.selected_diary_index = None

        except Exception as e:
            self.notify("Error no refresh_diaries: " + str(e))